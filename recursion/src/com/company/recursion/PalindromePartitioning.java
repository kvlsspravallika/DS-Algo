package com.company.recursion;

import java.util.ArrayList;
import java.util.List;

/*
Problem Statement: You are given a string s, partition it in such a way that every substring is a palindrome. Return all such palindromic partitions of s.

        Note: A palindrome string is a string that reads the same backward as forward.

        Example 1:

        Input: s = “aab”

        Output: [ ["a","a","b"], ["aa","b"] ]

        Explanation: The first  answer is generated by  making three partitions. The second answer is generated by making two partitions.



        Example 2:

        Input: s = “aabb”

        Output: [ [“a”,”a”,”b”,”b”], [“aa”,”bb”], [“a”,”a”,”bb”], [“aa”,”b”,”b”] ]

        Explanation: See Figure

*/

public class PalindromePartitioning {
    public static void main(String[] args) {
        System.out.println(palindromePartition("aabb"));
        System.out.println(palindromePartition("abc"));
        System.out.println(palindromePartition("aba"));
    }

    private static List<List<String>> palindromePartition(String input){
        List<List<String>> result = new ArrayList<>();
        partition(0, input, result, new ArrayList<>());
        return result;
    }

    private static void partition(int index, String input, List<List<String>> result, List<String> list) {
        if (index == input.length()) {
            result.add(new ArrayList<>(list));
            return;
        }
        for (int i = index; i < input.length(); i++) {
            if (isPalindrome(input, index, i)) {
                list.add(input.substring(index, i + 1));
                partition(i + 1, input, result, list);
                list.remove(list.size() - 1);
            }
        }
    }

    private static boolean isPalindrome(String input, int start, int end){
        while(start<=end){
            if(input.charAt(start++)!=input.charAt(end--)){
                return false;
            }
        }
        return true;
    }
}
/*
    Time Complexity: O( (2^n) *k*(n/2) )

        Reason: O(2^n) to generate every substring and O(n/2)  to check if the substring generated is a palindrome. O(k) is for inserting the palindromes in another data structure, where k  is the average length of the palindrome list.

        Space Complexity: O(k * x)

        Reason: The space complexity can vary depending upon the length of the answer. k is the average length of the list of palindromes and if we have x such list of palindromes in our final answer. The depth of the recursion tree is n, so the auxiliary space required is equal to the O(n).
*/